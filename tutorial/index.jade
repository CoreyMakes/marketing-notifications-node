.step(data-title='Introduction')
  :markdown
    ## SMS and MMS Marketing Notifications

    Ready to implement SMS and MMS marketing notifications? Here's how it works at a high level:

    1. A possible customer sends an SMS to a Twilio phone number you advertise
       either online, on printed propaganda or on TV advertising.
    1. Your application confirms that the user wants to receive SMS and MMS
       notifications from your application.
    1. An administrator or marketing campaign manager uses a web form to craft a
       message that will go out to all subscribers via SMS/MMS message.

    ## Building Blocks

    To get this done, you'll be working with the following tools:

    * [TwiML](//www.local.twilio.com/docs/api/twiml) and the [<Message>
    Verb](/docs/api/twiml/sms/message): We'll use TwiML to manage interactions
    initiated by the user via SMS.
    * [Messages Resource](/docs/api/rest/sending-sms): We will use the REST API
    to broadcast messages out to all subscribers.

    ## How To Read This Tutorial

    In this tutorial, we will be working through a series of [user stories](http://en.wikipedia.org/wiki/User_story) that describe how to fully implement this Twilio-powered application. Each will describe a major step on the road to implementing this functionality yourself.

    Let's get started! Click the right arrow to move on to the next step of the tutorial.

.step(data-title='Subscriber', data-file='models/Subscriber.js', data-highlight='')
  :markdown
    ## Subscriber

    In order to send out marketing notifications to a subscriber, we need to
    provide the right model.

    To make this happen, we will need to implement a couple of things:
    * a model object to save information about a `Subscriber`
    * an [Express](http://expressjs.com) web application that can respond to [Twilio webhook requests](/docs/api/twiml/sms/twilio_request) when our number gets an incoming text.

    Let's start by looking at the model for a `Subscriber`.

.step(data-title='Creating Subscribers', data-file='models/Subscriber.js', data-highlight='8-14')
  :markdown
    ## Creating Subscribers

    We begin by adding a [Mongoose](http://mongoosejs.com/) model that will help us store information about a subscriber in a MongoDB database.

    For our purposes we don't need to store very much information about the subscriber - just their phone number (so we can send them updates) and a boolean flag indicating whether or not they are opted-in to receive updates.

    Now that we have a model object to save a subscriber, let's move up to the controller level to see how we create one.

.step(data-title='Creating a Webhook Route', data-file='controllers/router.js')
  :markdown
    ## Creating a Webhook Route

    In an Express web application, we can configure one or many JavaScript functions to handle incoming HTTP requests. When Twilio receives an incoming message, it will send an HTTP POST request to our server.

    Here, we configure all the routes our application will handle, and map those routes to controller functions.

.step(data-title='Mapping the Webhook to a Route', data-file='controllers/router.js', data-highlight='6-7')
  :markdown
    ## Mapping the Webhook to a Route

    Click on one of your Twilio numbers on the [Manage Phone Numbers](/user/account/phone-numbers/incoming) screen in the account portal. For this number, you will need to configure a public server address for your application, as well as the `/message` route which Twilio will POST when your number gets any incoming messages:

    ![Twilio Number Configuration](//s3.amazonaws.com/howtodocs/marketing-notifications-webhook.png)

    Let's dive into the controller function that will handle incoming messages next.

.step(data-title='Handling An Incoming Message', data-file='controllers/message.js', data-highlight='')
  :markdown
    ## Handling An Incoming Message

    Since the `webhook` function will be called every time our application receives a message, it has a lot it needs to do. We'll look at how this function works piece by piece as the tutorial continues, but let's focus on the first message the user sends for now.

.step(data-title='Creating a New Subscriber', data-file='controllers/message.js', data-highlight="6-35")
  :markdown
    ## Creating a New Subscriber

    We begin by getting the user's phone number from the [incoming Twilio request](/docs/api/twiml/sms/twilio_request). Now, we need to find a `Subscriber` model with that phone number (this should be a unique property of the `Subscriber`).

    If there's no subscriber with this phone number, we create one, save it, and respond with a message asking them to text "subscribe" to confirm that they want to receive messages from us.

    And that's all we want at this step! We've created a `Subscriber` model to keep track of the people that want our messages, and saved them in the database when they text us for the first time.

    Next, let's look at the logic we need to put in place to allow them to manage their subscription status.

.step(data-title='User Story: Managing Subscriptions', data-file='controllers/message.js', data-highlight='')
  :markdown
    ##User Story: Managing Subscriptions


    We want to provide the user with two SMS commands to manage their subscription status: `subscribe` and `unsubscribe`.  These commands will toggle a boolean flag for their `Subscriber` record in the database, and will determine whether or not they receive messages from our marketing campaign. Because we want to respect our users' preferences, we don't opt them in automatically - rather, we have them confirm that they want to receive messages from us first.

    To make this happen, we will need to update the controller logic which handles the incoming text message to do a couple things:

    * If the user is a person already in the database, parse the message they sent to see if it's a command we recognize
    * If it is a `subscribe` or `unsubscribe` command, update their subscription status in the database
    * If it is a command we don't recognize, send them a message explaining available commands

    Let's go back into our controller function to see how this works.

.step(data-title='Processing an Incoming Message', data-file='controllers/message.js', data-highlight='37-70')
  :markdown
    ## Processing an Incoming Message

    This internal function handles parsing the incoming message from the user and executing conditional logic to see if they have issued us a command we recognize. It's executed after we have already hit the database once to retrieve the current `Subscriber` model.

.step(data-title='Handling a Subscription Command', data-file='controllers/message.js', data-highlight="46-61")
  :markdown
    ## Handling a Subscription Command

    If the user has texted `subscribe` or `unsubscribe`, we will update their subscription status in the database. We will then respond to them via SMS with the opposite command to either opt in to updates or opt out.

.step(data-title='Listing for Available Commands', data-file='controllers/message.js', data-highlight='63-68')
  :markdown
    ## Listing for Available Commands

    If they texted in something we don't recognize, we respond with a listing of all known commands. We could take this further and implement "help" text for each command, but in this simple use case the commands should be self-explanatory.

.step(data-title='Responding with TwiML', data-file='controllers/message.js', data-highlight='72-79')
  :markdown
    ## Responding with TwiML

    This `respond` helper function handles generating a TwiML (XML) response using a Jade template.  It's pretty simple, but for completeness let's peek at it to see what it does.

.step(data-title='Responding with TwiML: Jade Template', data-file='views/twiml.jade')
  :markdown
    ## Responding with TwiML: Jade Template

    [Jade](http://jade-lang.com/) is a popular template engine for Node.js that can be used to generate HTML or XML markup in a web application. We use Jade here to generate a TwiML `Response` containing a `Message` tag with the text we defined in the controller. This will tell Twilio to respond with a text message to the incoming message we just parsed.

    That's it for the user-facing commands! Now, we need to provide our marketing team with an interface to send messages out to all subscribers. Let's take a look at that next.

    .step(data-title='User Story: Sending SMS or MMS Notifications', data-file="controllers/router.js")
  :markdown
    ## User Story: Sending SMS or MMS Notifications

    Now that we have a list of subscribers for our awesome SMS and MMS content, we need to provide our marketing team some kind of interface to send out messages.

    To make this happen, we will need to update our application to do a few things:

    * Create a route to render a web form that an administrator can interact with
    * Create a controller function to handle the form's submission
    * Use the Twilio API to send out messages to all current subscribers

    Let's begin at the front end with the web form our administrators will interact with.

.step(data-title='Creating the Web Form', data-file='views/index.jade')
  :markdown
    ## Creating the Web Form

    Here we use Jade to render an HTML document containing a web form to be used by our marketing campaign administrators.

    It just has a couple of fields - one to specify a text message, and another to specify an optional URL to an image on the public Internet that we could send via MMS.

    Let's go to the controller next to see what happens when the form is submitted.

.step(data-title="Handling the Form's Submission", data-file='controllers/message.js', data-highlight='82-98')
  :markdown
    ## Handling the Form's Submission

    On the server, we grab the message text and image URL from the POST body, and use a function on our `Subscriber` model to send text messages to all current subscribers.

    When the messages are on their way, we redirect back to the same web form with a [flash](https://github.com/jaredhanson/connect-flash) message containing feedback about the messaging attempt.

    Let's jump into the model now to see how these messages are sent out.

.step(data-title='Configuring a Twilio REST Client', data-file='models/Subscriber.js', data-highlight='2-6')
  :markdown
    ## Configuring a Twilio REST Client

    When the model object is loaded, it creates a [Twilio REST API client](http://twilio.github.io/twilio-node) that can be used to send SMS and MMS messages. The client requires your Twilio account credentials (an account SID and auth token), which can be found [in the account portal](/user/account/voice-messaging).

    Let's check out the static function that sends the messages next.

.step(data-title='Sending Messages', data-file='models/Subscriber.js', data-highlight="16-64")
  :markdown
    ## Sending Messages

    Here we define a "static" function on the model which will query that database for all `Subscribers` that have opted in to receive notifications.

    Once the list of active subscribers has been found, we loop through and send each of them a message based on the parameters sent in from the controller. If there's no image URL associated with the message, we omit that field from the Twilio API request.

.step(data-title='All Done!', data-file='models/Subscriber.js')
  :markdown
    ## All Done!

    That's it! We've just implemented a an opt-in process and an administrative interface to run an SMS and MMS marketing campaign. Now all you need is killer content to share with your users via text or MMS.

    Thanks for checking out this tutorial! If you have any feedback to share with us, we'd love to hear it.[Contact the Twilio Developer Education Team](mailto:deved-oss@twilio.com) to let us know what you think.
